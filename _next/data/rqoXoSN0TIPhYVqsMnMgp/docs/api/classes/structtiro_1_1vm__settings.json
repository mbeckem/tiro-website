{"pageProps":{"slug":"classes/structtiro_1_1vm__settings","frontMatter":{"title":"tiro::vm_settings","summary":"Settings to control the construction of a virtual machine."},"mdx":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tirovm_settings\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#tirovm_settings\"\n  }, \"#\"), \"tiro::vm_settings\"), mdx(\"p\", null, \"Settings to control the construction of a virtual machine.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#include \\\"tiropp/vm.hpp\\\"\")), mdx(\"h2\", {\n    \"id\": \"public-attributes\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#public-attributes\"\n  }, \"#\"), \"Public Attributes\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"std::function< void(std::string_view \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/namespaces/namespacetiro#function-message\"\n  }, \"message\"), \")>\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/structtiro_1_1vm__settings#variable-print_stdout\"\n  }, \"print_stdout\")), \" \", mdx(\"br\", null), \"Invoked by the vm to print a message to the standard output, e.g.\")))), mdx(\"h2\", {\n    \"id\": \"public-attributes-documentation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#public-attributes-documentation\"\n  }, \"#\"), \"Public Attributes Documentation\"), mdx(\"h3\", {\n    \"id\": \"variable-print_stdout\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#variable-print_stdout\"\n  }, \"#\"), \"variable print_stdout\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"std::function< void(std::string_view message)> print_stdout;\\n\")), mdx(\"p\", null, \"Invoked by the vm to print a message to the standard output, e.g. \"), mdx(\"p\", null, \"when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"std.print(...)\"), \" was called. The vm will print to the process's standard output when this function is not set. \"), mdx(\"hr\", null), mdx(\"p\", null, \"Updated on  5 May 2021 at 11:21:35 CEST\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 id=\"tirovm_settings\"><a class=\"anchor-link\" href=\"#tirovm_settings\">#</a>tiro::vm_settings</h1><p>Settings to control the construction of a virtual machine.\n<code>#include &quot;tiropp/vm.hpp&quot;</code></p><h2 id=\"public-attributes\"><a class=\"anchor-link\" href=\"#public-attributes\">#</a>Public Attributes</h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>std::function&lt; void(std::string_view <a href=\"/tiro-website/docs/api/namespaces/namespacetiro#function-message\">message</a>)&gt;</td><td><strong><a href=\"/tiro-website/docs/api/classes/structtiro_1_1vm__settings#variable-print_stdout\">print_stdout</a></strong> <br/>Invoked by the vm to print a message to the standard output, e.g.</td></tr></tbody></table><h2 id=\"public-attributes-documentation\"><a class=\"anchor-link\" href=\"#public-attributes-documentation\">#</a>Public Attributes Documentation</h2><h3 id=\"variable-print_stdout\"><a class=\"anchor-link\" href=\"#variable-print_stdout\">#</a>variable print_stdout</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">std</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">::</span><span class=\"token plain\">function</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&lt;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">void</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\">std</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">::</span><span class=\"token plain\">string_view message</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&gt;</span><span class=\"token plain\"> print_stdout</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">;</span></div></pre></div><p>Invoked by the vm to print a message to the standard output, e.g. </p><p>when <code>std.print(...)</code> was called. The vm will print to the process&#x27;s standard output when this function is not set. </p><hr/><p>Updated on  5 May 2021 at 11:21:35 CEST</p>","scope":{}}},"__N_SSG":true}