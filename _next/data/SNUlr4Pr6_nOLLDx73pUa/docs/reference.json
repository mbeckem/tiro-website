{"pageProps":{"slug":"reference","frontMatter":{"title":"Reference Documentation","slug":"/reference"},"mdx":{"compiledSource":"var s=Object.defineProperty,c=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var m=(n,t,a)=>t in n?s(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a,e=(n,t)=>{for(var a in t||(t={}))l.call(t,a)&&m(n,a,t[a]);if(r)for(var a of r(t))o.call(t,a)&&m(n,a,t[a]);return n},p=(n,t)=>c(n,y(t));var d=(n,t)=>{var a={};for(var i in n)l.call(n,i)&&t.indexOf(i)<0&&(a[i]=n[i]);if(n!=null&&r)for(var i of r(n))t.indexOf(i)<0&&o.call(n,i)&&(a[i]=n[i]);return a};const makeShortcode=n=>function(a){return console.warn(\"Component \"+n+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},a))},Info=makeShortcode(\"Info\"),Rules=makeShortcode(\"Rules\"),Rule=makeShortcode(\"Rule\"),ItemTable=makeShortcode(\"ItemTable\"),Todo=makeShortcode(\"Todo\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var i=a,{components:n}=i,t=d(i,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"h1\",e({},{id:\"tiro-reference-documentation\"}),mdx(\"a\",e({parentName:\"h1\"},{className:\"anchor-link\",href:\"#tiro-reference-documentation\"}),\"#\"),\"Tiro Reference Documentation\"),mdx(\"h2\",e({},{id:\"basics\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"anchor-link\",href:\"#basics\"}),\"#\"),\"Basics\"),mdx(\"p\",null,`Tiro accepts UTF-8 encoded source files as input.\nSource files must conform to the rules outlined in this document to form a valid program.\nAt the very basic level, a source file will be recognized as a series of tokens.`),mdx(Info,{title:\"Note\",mdxType:\"Info\"},mdx(\"p\",null,\"Grammar rules in this section work on \",mdx(\"em\",{parentName:\"p\"},\"characters\"),`.\nNo whitespace is not allowed unless it matches one of the required patterns.`)),mdx(\"h3\",e({},{id:\"whitespace\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#whitespace\"}),\"#\"),\"Whitespace\"),mdx(\"p\",null,\"Whitespace tokens consists of a sequence of characters having the Unicode \",mdx(\"em\",{parentName:\"p\"},\"White_Space\"),` property. (TODO: White Space Pattern instead, add link)\nWhitespace is not significant: its only use is to separate characters of adjacent tokens that would otherwise be parsed as a single token.`),mdx(\"h3\",e({},{id:\"comments\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#comments\"}),\"#\"),\"Comments\"),mdx(\"p\",null,`Comments are used to annotate source code, but they have no meaning of their own.\nThey are simply treated as whitespace.`),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Comment\",definition:{type:\"choice\",children:[{type:\"nonterminal\",name:\"LineComment\"},{type:\"nonterminal\",name:\"BlockComment\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"LineComment\",definition:[\"//\",{type:\"repeat\",child:[{type:\"not\",child:\"\\\\n\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"BlockComment\",definition:[\"/*\",{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"BlockComment\"},{type:\"repeat\",child:{type:\"not\",child:\"*/\"}}]}},\"*/\"],mdxType:\"Rule\"})),mdx(\"p\",null,\"Line comments are introduced by \",mdx(\"inlineCode\",{parentName:\"p\"},\"//\"),` and continue until the end of the line.\nBlock comments are delimited by `,mdx(\"inlineCode\",{parentName:\"p\"},\"/*\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"*/\"),\" and may be nested.\"),mdx(\"h3\",e({},{id:\"keywords\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#keywords\"}),\"#\"),\"Keywords\"),mdx(\"p\",null,\"The following words have special meaning in the Tiro programming language:\"),mdx(ItemTable,{columns:5,items:[\"assert\",\"break\",\"const\",\"continue\",\"defer\",\"else\",\"export\",\"false\",\"for\",\"func\",\"if\",\"import\",\"in\",\"null\",\"return\",\"true\",\"var\",\"while\"],mdxType:\"ItemTable\"}),mdx(\"h4\",e({},{id:\"reserved-keywords\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#reserved-keywords\"}),\"#\"),\"Reserved keywords\"),mdx(\"p\",null,\"The following keywords are reserved for future use:\"),mdx(ItemTable,{columns:5,items:[\"as\",\"catch\",\"class\",\"interface\",\"is\",\"package\",\"protocol\",\"scope\",\"struct\",\"switch\",\"throw\",\"try\",\"yield\"],mdxType:\"ItemTable\"}),mdx(\"h3\",e({},{id:\"identifiers\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#identifiers\"}),\"#\"),\"Identifiers\"),mdx(\"p\",null,`Identifiers are used to name items.\nThey consist of one or more identifier characters as defined by the `,mdx(\"em\",{parentName:\"p\"},\"XID_Start\"),\" and \",mdx(\"em\",{parentName:\"p\"},\"XID_Continue\"),` Unicode properties. (TODO: Link)\nKeywords cannot be used as identifiers.`),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Identifier\",definition:{type:\"note\",child:{type:\"nonterminal\",name:\"KeywordOrIdentifier\"},note:\"Not including keywords\"},mdxType:\"Rule\"}),mdx(Rule,{name:\"KeywordOrIdentifier\",definition:[{type:\"choice\",children:[{type:\"nonterminal\",name:\"XID_Start\",undefined:!0},\"_\"]},{type:\"repeat\",child:{type:\"nonterminal\",name:\"XID_Continue\",undefined:!0}}],mdxType:\"Rule\"})),mdx(\"h3\",e({},{id:\"number-literals\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#number-literals\"}),\"#\"),\"Number literals\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Integer\",definition:{type:\"choice\",children:[{type:\"nonterminal\",name:\"DecInteger\"},{type:\"nonterminal\",name:\"BinInteger\"},{type:\"nonterminal\",name:\"OctInteger\"},{type:\"nonterminal\",name:\"HexInteger\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"DecInteger\",definition:[{type:\"nonterminal\",name:\"DecDigit\"},{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"DecDigit\"},\"_\"]}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"BinInteger\",definition:[\"0b\",{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"BinDigit\"},\"_\"]}},{type:\"nonterminal\",name:\"BinDigit\"},{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"BinDigit\"},\"_\"]}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"OctInteger\",definition:[\"0o\",{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"OctDigit\"},\"_\"]}},{type:\"nonterminal\",name:\"OctDigit\"},{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"OctDigit\"},\"_\"]}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"HexInteger\",definition:[\"0x\",{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"HexDigit\"},\"_\"]}},{type:\"nonterminal\",name:\"HexDigit\"},{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"HexDigit\"},\"_\"]}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"DecDigit\",definition:{type:\"range\",value:[\"0\",\"9\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"BinDigit\",definition:{type:\"choice\",children:[\"0\",\"1\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"OctDigit\",definition:{type:\"range\",value:[\"0\",\"7\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"HexDigit\",definition:{type:\"choice\",children:[{type:\"range\",value:[\"0\",\"9\"]},{type:\"range\",value:[\"a\",\"f\"]},{type:\"range\",value:[\"A\",\"F\"]}]},mdxType:\"Rule\"})),mdx(Todo,{mdxType:\"Todo\"},\"Document floating point numbers.\"),mdx(\"h3\",e({},{id:\"string-literals\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#string-literals\"}),\"#\"),\"String literals\"),mdx(\"p\",null,\"Strings are sequences of characters enclosed by matching quote characters (\",mdx(\"inlineCode\",{parentName:\"p\"},'\"'),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"'\"),`).\nWithin a string, variables can be interpolated when prefixed with a `,mdx(\"inlineCode\",{parentName:\"p\"},\"$\"),` sign and full expressions can be interpolated when enclosed within a\nblock started with `,mdx(\"inlineCode\",{parentName:\"p\"},\"${\"),\" and closed with a \",mdx(\"inlineCode\",{parentName:\"p\"},\"}\"),\" sign.\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"String\",definition:[{type:\"nonterminal\",name:\"StringDelimiter\"},{type:\"repeat\",child:{type:\"choice\",children:[{type:\"nonterminal\",name:\"PlainStringContent\"},{type:\"nonterminal\",name:\"EscapeSequence\"},{type:\"nonterminal\",name:\"InterpolatedValue\"}]}},{type:\"note\",child:{type:\"nonterminal\",name:\"StringDelimiter\"},note:\"matches starting delimiter\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"StringDelimiter\",definition:{type:\"choice\",children:['\"',\"'\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"PlainStringContent\",definition:{type:\"repeat\",child:{type:\"not\",child:{type:\"choice\",children:[\"\\\\\",\"$\",{type:\"note\",child:{type:\"nonterminal\",name:\"StringDelimiter\"},note:\"matches starting delimiter\"}]}}},mdxType:\"Rule\"}),mdx(Rule,{name:\"InterpolatedValue\",definition:{type:\"choice\",children:[[\"$\",{type:\"nonterminal\",name:\"Identifier\"}],[\"${\",{type:\"nonterminal\",name:\"Expr\"},\"}\"]]},mdxType:\"Rule\"})),mdx(Todo,{mdxType:\"Todo\"},mdx(\"p\",null,\"Open design questions:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Should strings be multi line by default (current state)? Or should a \",mdx(\"inlineCode\",{parentName:\"li\"},\"\\\\\"),\" at the end of a line be necessary to continue to the following line?\"),mdx(\"li\",{parentName:\"ul\"},\"Should all strings support interpolation by default? Or provide a variant (e.g. delimited by \",mdx(\"inlineCode\",{parentName:\"li\"},\"'\"),\") that does \",mdx(\"em\",{parentName:\"li\"},\"not\"),\" support interpolation?\"),mdx(\"li\",{parentName:\"ul\"},\"Should all strings be guaranteed (required) to be valid UTF-8?\"))),mdx(\"h4\",e({},{id:\"escape-sequences\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#escape-sequences\"}),\"#\"),\"Escape sequences\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"EscapeSequence\",definition:{type:\"choice\",children:[{type:\"nonterminal\",name:\"EscapedCharacter\"},{type:\"nonterminal\",name:\"AsciiEscape\"},{type:\"nonterminal\",name:\"UnicodeEscape\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"EscapedCharacter\",definition:{type:\"choice\",children:[\"\\\\\\\\\",\"\\\\n\",\"\\\\r\",\"\\\\t\",'\\\\\"',\"\\\\'\",\"\\\\$\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"AsciiEscape\",definition:[\"\\\\x\",{type:\"nonterminal\",name:\"HexDigit\"},{type:\"nonterminal\",name:\"HexDigit\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"UnicodeEscape\",definition:[\"\\\\u{\",{type:\"repeat\",min:1,child:{type:\"nonterminal\",name:\"HexDigit\"}},\"}\"],mdxType:\"Rule\"})),mdx(\"p\",null,\"Escape sequences produce the following string content:\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Escape Sequence\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Production\"),mdx(\"th\",e({parentName:\"tr\"},{align:null})))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\\\\\\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Literal \",mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\n\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Newline\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\r\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Carriage return\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\t\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Tabulator\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},'\\\\\"')),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Literal \",mdx(\"inlineCode\",{parentName:\"td\"},'\"')),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\'\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Literal \",mdx(\"inlineCode\",{parentName:\"td\"},\"'\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\$\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Literal \",mdx(\"inlineCode\",{parentName:\"td\"},\"$\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\x\"),\" digits..\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"A single byte\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"The numeric value of the two hex digits is produced as a byte (TODO: Must be valid utf-8?)\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"\\\\u{\"),\" digits.. \",mdx(\"inlineCode\",{parentName:\"td\"},\"}\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"A single unicode code point\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"The sequence of hex digits is interpreted as the value of a unicode code point.\")))),mdx(\"h3\",e({},{id:\"symbol-literals\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#symbol-literals\"}),\"#\"),\"Symbol literals\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Symbol\",definition:[\"#\",{type:\"nonterminal\",name:\"Identifier\"}],mdxType:\"Rule\"})),mdx(Todo,{mdxType:\"Todo\"},mdx(\"p\",null,\"Documentation\")),mdx(\"h2\",e({},{id:\"grammar\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"anchor-link\",href:\"#grammar\"}),\"#\"),\"Grammar\"),mdx(Info,{title:\"Note\",mdxType:\"Info\"},mdx(\"p\",null,\"Grammar rules in this section work on \",mdx(\"em\",{parentName:\"p\"},\"tokens\"),`.\nAny amount of white space may appear between matching tokens.`)),mdx(\"h3\",e({},{id:\"items\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#items\"}),\"#\"),\"Items\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"File\",definition:{type:\"repeat\",child:{type:\"nonterminal\",name:\"Item\"}},mdxType:\"Rule\"}),mdx(Rule,{name:\"Item\",definition:[{type:\"optional\",child:\"export\"},{type:\"choice\",children:[[{type:\"nonterminal\",name:\"ImportDecl\"},\";\"],[{type:\"nonterminal\",name:\"VarDecl\"},\";\"],[{type:\"nonterminal\",name:\"FuncDecl\"}]]}],mdxType:\"Rule\"})),mdx(\"p\",null,\"A Tiro source file is a sequence of \",mdx(\"em\",{parentName:\"p\"},\"Items\"),`.\nAn item containing the `,mdx(\"inlineCode\",{parentName:\"p\"},\"export\"),` modifier will be exported from the current module.\nExported items are visible to other modules and may be imported.`),mdx(\"h4\",e({},{id:\"imports\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#imports\"}),\"#\"),\"Imports\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"ImportDecl\",definition:[\"import\",{type:\"nonterminal\",name:\"ImportPath\"},{type:\"optional\",child:[\"as\",{type:\"nonterminal\",name:\"Identifier\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"ImportPath\",definition:[{type:\"nonterminal\",name:\"Identifier\"},{type:\"repeat\",child:[\".\",{type:\"nonterminal\",name:\"Identifier\"}]}],mdxType:\"Rule\"})),mdx(\"p\",null,\"An \",mdx(\"inlineCode\",{parentName:\"p\"},\"import\"),\" item imports the module referenced by the \",mdx(\"em\",{parentName:\"p\"},\"ImportPath\"),` and introduces it into the current scope.\nThe last `,mdx(\"em\",{parentName:\"p\"},\"Identifier\"),\" in the \",mdx(\"em\",{parentName:\"p\"},\"ImportPath\"),` serves as the name of the imported reference by default.\nA custom name may be provided by using the `,mdx(\"inlineCode\",{parentName:\"p\"},\"as\"),\" keyword.\"),mdx(Todo,{mdxType:\"Todo\"},\"The import path must currently point to a module. It should also allow for entities within a module. For example, `import std.print as myprint` should be valid.\",mdx(\"p\",null,\"Grouping imports should be possible, for example \",mdx(\"inlineCode\",{parentName:\"p\"},\"import std { print, PI as MY_PI}\"),\".\")),mdx(\"h4\",e({},{id:\"variables\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#variables\"}),\"#\"),\"Variables\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"VarDecl\",definition:[{type:\"choice\",children:[\"const\",\"var\"]},{type:\"nonterminal\",name:\"Binding\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Binding\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"Binding\",definition:[{type:\"nonterminal\",name:\"BindingPattern\"},{type:\"optional\",child:[\"=\",{type:\"nonterminal\",name:\"Expr\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"BindingPattern\",definition:{type:\"choice\",children:[{type:\"nonterminal\",name:\"Identifier\"},{type:\"nonterminal\",name:\"TupleBindingPattern\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"TupleBindingPattern\",definition:[\"(\",{type:\"nonterminal\",name:\"Identifier\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Identifier\"}]},\")\"],mdxType:\"Rule\"})),mdx(\"p\",null,`Variable declarations introduce one or more variables into the current scope.\nEach variable is defined by a `,mdx(\"em\",{parentName:\"p\"},\"Binding\"),\", which may provide an initializer expression for the \",mdx(\"em\",{parentName:\"p\"},\"Identifier\"),\" or \",mdx(\"em\",{parentName:\"p\"},\"Identifiers\"),\" mentioned in the \",mdx(\"em\",{parentName:\"p\"},\"BindingPattern\"),\".\"),mdx(\"p\",null,\"Bindings introduce a single new variable when the \",mdx(\"em\",{parentName:\"p\"},\"BindingPattern\"),` consists of a single identifier.\nThe optional initializer expression may produce any value in this case.\nA `,mdx(\"em\",{parentName:\"p\"},\"TupleBindingPattern\"),` introduces multiple variables at once.\nThe optional initializer for a tuple pattern must produce a tuple value with a compatible size (at least the number of declared variable names).`),mdx(\"p\",null,\"Using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"var\"),\" keyword creates a mutable variable, while a variable declared using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"const\"),` keyword cannot be reassigned after its initialization.\nConstants must have an initializer.`),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Declaration kind\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Example\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Meaning\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Simple declaration\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"var x;\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Declares the initialized variable \",mdx(\"em\",{parentName:\"td\"},\"x\"),\" in the current scope\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Multiple variables\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"var x, y;\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Declares \",mdx(\"em\",{parentName:\"td\"},\"x\"),\" and \",mdx(\"em\",{parentName:\"td\"},\"y\"),\" in the current scope\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"With initializer\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"var x = 3.14;\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Declares \",mdx(\"em\",{parentName:\"td\"},\"x\"),\" and with the initial value \",mdx(\"inlineCode\",{parentName:\"td\"},\"3.14\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Constant declaration\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"const x = 3.14; \")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Like the above, but \",mdx(\"em\",{parentName:\"td\"},\"x\"),\" cannot be reassigned anymore\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Tuple unpacking\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"var (x, y) = (1, 2);\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Unpacks the right hand side tuple into the new variables \",mdx(\"em\",{parentName:\"td\"},\"x\"),\" and \",mdx(\"em\",{parentName:\"td\"},\"y\"))))),mdx(\"h4\",e({},{id:\"functions\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#functions\"}),\"#\"),\"Functions\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"FuncDecl\",definition:[\"func\",{type:\"optional\",child:{type:\"nonterminal\",name:\"Identifier\"}},\"(\",{type:\"optional\",child:{type:\"nonterminal\",name:\"ParamList\"}},\")\",{type:\"nonterminal\",name:\"FuncBody\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"ParamList\",definition:[{type:\"nonterminal\",name:\"Identifier\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Identifier\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"FuncBody\",definition:{type:\"choice\",children:[[\"=\",{type:\"nonterminal\",name:\"Expr\"}],{type:\"nonterminal\",name:\"BlockExpr\"}]},mdxType:\"Rule\"})),mdx(\"p\",null,`A function declaration introduce a function into the current scope.\nFunctions may have a name, a set of parameters and a body.`),mdx(\"p\",null,\"The body of a function may be specified as either a \",mdx(\"em\",{parentName:\"p\"},\"BlockExpr\"),\" or as a single expression introduced by a \",mdx(\"inlineCode\",{parentName:\"p\"},\"=\"),` sign.\nThe shorthand syntax is useful for very simple functions.`),mdx(\"span\",{className:\"caption\"},\"Example:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tiro\"}),`import std;\n\nexport func main() {\n    std.print(block_body(1));\n    std.print(shorthand_body(2));\n}\n\nfunc block_body(p) {\n    const result = p * 2;\n    return result;\n}\n\nfunc shorthand_body(p) = p * 2;\n`)),mdx(\"h3\",e({},{id:\"statements\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#statements\"}),\"#\"),\"Statements\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Stmt\",definition:{type:\"choice\",children:[[{type:\"nonterminal\",name:\"VarDecl\"},\";\"],[{type:\"nonterminal\",name:\"AssertStmt\"},\";\"],[{type:\"nonterminal\",name:\"DeferStmt\"},\";\"],[{type:\"nonterminal\",name:\"WhileStmt\"}],[{type:\"nonterminal\",name:\"ForEachStmt\"}],[{type:\"nonterminal\",name:\"ForStmt\"}],[{type:\"nonterminal\",name:\"IfExpr\"}],[{type:\"nonterminal\",name:\"BlockExpr\"}],[{type:\"nonterminal\",name:\"Expr\"},\";\"],\";\"]},mdxType:\"Rule\"})),mdx(\"p\",null,`Statements are constructs used in block expressions such as function bodies.\nMost statements must be terminated with a semicolon.\nThe semicolon is optional for block-like statements, where the end of the statement is obvious from the position of the closing `,mdx(\"inlineCode\",{parentName:\"p\"},\"}\"),\".\"),mdx(\"h4\",e({},{id:\"assertions\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#assertions\"}),\"#\"),\"Assertions\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"AssertStmt\",definition:[\"assert\",\"(\",{type:\"nonterminal\",name:\"Expr\"},{type:\"optional\",child:[\",\",{type:\"nonterminal\",name:\"StringExpr\"}]},\")\"],mdxType:\"Rule\"})),mdx(\"p\",null,`An assertion verifies that the expression produces a truthful value.\nA failed assertion results in a `,mdx(\"em\",{parentName:\"p\"},\"panic\"),\".\"),mdx(\"p\",null,\"An optional message argument may be specified; it will be included in the panic's diagnostic error message.\"),mdx(\"h4\",e({},{id:\"defer-statements\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#defer-statements\"}),\"#\"),\"Defer statements\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"DeferStmt\",definition:[\"defer\",{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"})),mdx(\"p\",null,`The defer statement registers an expression to be evaluated when the program leaves the current scope.\nIt's main use is to ensure that resources are cleaned up properly.`),mdx(\"p\",null,\"Defer statements that have been visited by the program will run even if the scope is being left abrubtly, such as by an early \",mdx(\"inlineCode\",{parentName:\"p\"},\"return\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"break\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"continue\"),\" or a panic.\"),mdx(\"span\",{className:\"caption\"},\"Example:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tiro\"}),`import std;\n\nexport func main() {\n    std.print(\"aquire resource\");\n    defer std.print(\"release resource\");\n    std.print(\"use resource\");\n}\n`)),mdx(\"h4\",e({},{id:\"while-loops\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#while-loops\"}),\"#\"),\"While loops\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"WhileStmt\",definition:[\"while\",{type:\"nonterminal\",name:\"Expr\"},{type:\"nonterminal\",name:\"BlockExpr\"}],mdxType:\"Rule\"})),mdx(\"h4\",e({},{id:\"for-each-loops\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#for-each-loops\"}),\"#\"),\"For-each loops\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"ForEachStmt\",definition:[\"for\",{type:\"nonterminal\",name:\"BindingPattern\"},\"in\",{type:\"nonterminal\",name:\"Expr\"},{type:\"nonterminal\",name:\"BlockExpr\"}],mdxType:\"Rule\"})),mdx(\"h4\",e({},{id:\"classic-for-loops\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"anchor-link\",href:\"#classic-for-loops\"}),\"#\"),\"Classic for loops\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"ForStmt\",definition:[\"for\",{type:\"optional\",child:{type:\"nonterminal\",name:\"VarDecl\"}},\";\",{type:\"optional\",child:{type:\"nonterminal\",name:\"Expr\"}},\";\",{type:\"optional\",child:{type:\"nonterminal\",name:\"Expr\"}},{type:\"nonterminal\",name:\"BlockExpr\"}],mdxType:\"Rule\"})),mdx(\"h3\",e({},{id:\"expressions\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#expressions\"}),\"#\"),\"Expressions\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Expr\",definition:{type:\"choice\",children:[{type:\"nonterminal\",name:\"VarExpr\"},{type:\"nonterminal\",name:\"FieldExpr\"},{type:\"nonterminal\",name:\"TupleFieldExpr\"},{type:\"nonterminal\",name:\"ElementExpr\"},{type:\"nonterminal\",name:\"CallExpr\"},{type:\"nonterminal\",name:\"UnaryExpr\"},{type:\"nonterminal\",name:\"BinaryExpr\"},{type:\"nonterminal\",name:\"AssignExpr\"},{type:\"nonterminal\",name:\"ContinueExpr\"},{type:\"nonterminal\",name:\"BreakExpr\"},{type:\"nonterminal\",name:\"ReturnExpr\"},{type:\"nonterminal\",name:\"GroupedExpr\"},{type:\"nonterminal\",name:\"IfExpr\"},{type:\"nonterminal\",name:\"FuncExpr\"},{type:\"nonterminal\",name:\"BlockExpr\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"VarExpr\",definition:{type:\"nonterminal\",name:\"Identifier\"},mdxType:\"Rule\"}),mdx(Rule,{name:\"FieldExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"choice\",children:[\".\",\"?.\"]},{type:\"nonterminal\",name:\"Identifier\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"TupleFieldExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"choice\",children:[\".\",\"?.\"]},{type:\"nonterminal\",name:\"NonNegativeInt\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"ElementExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"choice\",children:[\"[\",\"?[\"]},{type:\"nonterminal\",name:\"Expr\"},\"]\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"CallExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"choice\",children:[\"(\",\"?(\"]},{type:\"optional\",child:{type:\"nonterminal\",name:\"CallArguments\"}},\")\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"CallArguments\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Expr\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"UnaryExpr\",definition:[{type:\"nonterminal\",name:\"UnaryOp\"},{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"UnaryOp\",definition:{type:\"choice\",children:[\"+\",\"-\",\"!\",\"~\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"BinaryExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"nonterminal\",name:\"BinaryOp\"},{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"BinaryOp\",definition:{type:\"choice\",children:[\"+\",\"-\",\"*\",\"**\",\"/\",\"%\",\"<<\",\">>\",\"&\",\"|\",\"^\",\"<\",\">\",\"<=\",\">=\",\"==\",\"!=\",\"??\",\"&&\",\"||\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"AssignExpr\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"nonterminal\",name:\"AssignOp\"},{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"AssignOp\",definition:{type:\"choice\",children:[\"=\",\"+=\",\"-=\",\"*=\",\"**=\",\"/=\",\"%=\"]},mdxType:\"Rule\"}),mdx(Rule,{name:\"ContinueExpr\",definition:\"continue\",mdxType:\"Rule\"}),mdx(Rule,{name:\"BreakExpr\",definition:\"break\",mdxType:\"Rule\"}),mdx(Rule,{name:\"ReturnExpr\",definition:[\"return\",{type:\"optional\",child:{type:\"nonterminal\",name:\"Expr\"}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"GroupedExpr\",definition:[\"(\",{type:\"nonterminal\",name:\"Expr\"},\")\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"IfExpr\",definition:[\"if\",{type:\"nonterminal\",name:\"Expr\"},{type:\"nonterminal\",name:\"BlockExpr\"},{type:\"optional\",child:[\"else\",{type:\"nonterminal\",name:\"BlockExpr\"}]}],mdxType:\"Rule\"}),mdx(Rule,{name:\"FuncExpr\",definition:{type:\"nonterminal\",name:\"FuncDecl\"},mdxType:\"Rule\"}),mdx(Rule,{name:\"BlockExpr\",definition:[\"{\",{type:\"repeat\",child:{type:\"nonterminal\",name:\"Stmt\"}},\"}\"],mdxType:\"Rule\"})),mdx(\"h3\",e({},{id:\"literals\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"anchor-link\",href:\"#literals\"}),\"#\"),\"Literals\"),mdx(Rules,{mdxType:\"Rules\"},mdx(Rule,{name:\"Literal\",definition:{type:\"choice\",children:[\"true\",\"false\",\"null\",{type:\"nonterminal\",name:\"Integer\"},{type:\"nonterminal\",name:\"Float\"},{type:\"nonterminal\",name:\"String\"},{type:\"nonterminal\",name:\"Symbol\"},{type:\"nonterminal\",name:\"TupleLiteral\"},{type:\"nonterminal\",name:\"RecordLiteral\"},{type:\"nonterminal\",name:\"ArrayLiteral\"},{type:\"nonterminal\",name:\"MapLiteral\"},{type:\"nonterminal\",name:\"SetLiteral\"}]},mdxType:\"Rule\"}),mdx(Rule,{name:\"TupleLiteral\",definition:[\"(\",{type:\"optional\",child:{type:\"nonterminal\",name:\"TupleElements\"}},\")\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"TupleElements\",definition:[{type:\"repeat\",min:1,child:[{type:\"nonterminal\",name:\"Expr\"},\",\"]},{type:\"optional\",child:{type:\"nonterminal\",name:\"Expr\"}}],mdxType:\"Rule\"}),mdx(Rule,{name:\"RecordLiteral\",definition:[\"(\",{type:\"choice\",children:[{type:\"nonterminal\",name:\"RecordElements\"},\":\"]},\")\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"RecordElements\",definition:[{type:\"nonterminal\",name:\"RecordEntry\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"RecordEntry\"}]},{type:\"optional\",child:\",\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"RecordEntry\",definition:[{type:\"nonterminal\",name:\"Identifier\"},\":\",{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"ArrayLiteral\",definition:[\"[\",{type:\"optional\",child:{type:\"nonterminal\",name:\"ArrayElements\"}},\"]\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"ArrayElements\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Expr\"}]},{type:\"optional\",child:\",\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"MapLiteral\",definition:[\"map\",\"{\",{type:\"optional\",child:{type:\"nonterminal\",name:\"MapElements\"}},\"}\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"MapElements\",definition:[{type:\"nonterminal\",name:\"MapEntry\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"MapEntry\"}]},{type:\"optional\",child:\",\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"MapEntry\",definition:[{type:\"nonterminal\",name:\"Expr\"},\":\",{type:\"nonterminal\",name:\"Expr\"}],mdxType:\"Rule\"}),mdx(Rule,{name:\"SetLiteral\",definition:[\"set\",\"{\",{type:\"optional\",child:{type:\"nonterminal\",name:\"SetElements\"}},\"}\"],mdxType:\"Rule\"}),mdx(Rule,{name:\"SetElements\",definition:[{type:\"nonterminal\",name:\"Expr\"},{type:\"repeat\",child:[\",\",{type:\"nonterminal\",name:\"Expr\"}]},{type:\"optional\",child:\",\"}],mdxType:\"Rule\"})),mdx(\"h2\",e({},{id:\"modules\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"anchor-link\",href:\"#modules\"}),\"#\"),\"Modules\"),mdx(Todo,{mdxType:\"Todo\"},\"Documentation\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}