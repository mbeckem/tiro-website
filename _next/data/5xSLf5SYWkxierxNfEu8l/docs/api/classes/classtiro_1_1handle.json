{"pageProps":{"slug":"classes/classtiro_1_1handle","frontMatter":{"title":"tiro::handle","summary":"A handle represents a reference to an object."},"mdx":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tirohandle\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#tirohandle\"\n  }, \"#\"), \"tiro::handle\"), mdx(\"p\", null, \"A handle represents a reference to an object.  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#detailed-description\"\n  }, \"More...\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#include \\\"tiropp/objects.hpp\\\"\")), mdx(\"p\", null, \"Inherited by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1array\"\n  }, \"array\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1boolean\"\n  }, \"boolean\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1coroutine\"\n  }, \"coroutine\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1float__\"\n  }, \"float_\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1function\"\n  }, \"function\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1integer\"\n  }, \"integer\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1module\"\n  }, \"module\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1native\"\n  }, \"native\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1null\"\n  }, \"null\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1record\"\n  }, \"record\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1result\"\n  }, \"result\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1string\"\n  }, \"string\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1tuple\"\n  }, \"tuple\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/api/classes/classtiro_1_1type\"\n  }, \"type\")), mdx(\"h2\", {\n    \"id\": \"protected-classes\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#protected-classes\"\n  }, \"#\"), \"Protected Classes\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"struct\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\"\n  }, \"check_kind_t\")))))), mdx(\"h2\", {\n    \"id\": \"public-functions\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#public-functions\"\n  }, \"#\"), \"Public Functions\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-~handle\"\n  }, \"~handle\")), \"() =default\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bool\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-valid\"\n  }, \"valid\")), \"() const\", mdx(\"br\", null), \"Returns true if this handle points to an object (i.e. it was not moved from).\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1type\"\n  }, \"type\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-type_of\"\n  }, \"type_of\")), \"() const\", mdx(\"br\", null), \"Returns the type of the value currently held by this handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1string\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-to_string\"\n  }, \"to_string\")), \"() const\", mdx(\"br\", null), \"Returns a string that represents the current value.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/files/def_8h#typedef-tiro_vm_t\"\n  }, \"tiro_vm_t\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-raw_vm\"\n  }, \"raw_vm\")), \"() const\", mdx(\"br\", null), \"Returns the raw vm instance associated with this handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/files/def_8h#typedef-tiro_handle_t\"\n  }, \"tiro_handle_t\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-raw_handle\"\n  }, \"raw_handle\")), \"() const\", mdx(\"br\", null), \"Returns the raw handle instance (nullptr for invalid handles).\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" &\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-operator=\"\n  }, \"operator=\")), \"(const \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" & other)\", mdx(\"br\", null), \"Copy assigns a handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" &\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-operator=\"\n  }, \"operator=\")), \"(\", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" && other) =default\", mdx(\"br\", null), \"Move assigns a handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/namespaces/namespacetiro#enum-value_kind\"\n  }, \"value_kind\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-kind\"\n  }, \"kind\")), \"() const\", mdx(\"br\", null), \"Returns the kind of the value currently held by this handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-handle\"\n  }, \"handle\")), \"(\", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/files/def_8h#typedef-tiro_vm_t\"\n  }, \"tiro_vm_t\"), \" raw_vm)\", mdx(\"br\", null), \"Constructs a new handle instance.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-handle\"\n  }, \"handle\")), \"(const \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" & other)\", mdx(\"br\", null), \"Constructs a new handle and initialize is it with the same value as \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"other\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-handle\"\n  }, \"handle\")), \"(\", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" && other) =default\", mdx(\"br\", null), \"Move constructs a handle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"template <typename T \", \">\", \" \", mdx(\"br\", null), \"T\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-as\"\n  }, \"as\")), \"() const\", mdx(\"br\", null), \"Converts this value to the target type.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"template <typename T \", \">\", \" \", mdx(\"br\", null), \"T\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-as\"\n  }, \"as\")), \"()\")))), mdx(\"h2\", {\n    \"id\": \"protected-functions\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#protected-functions\"\n  }, \"#\"), \"Protected Functions\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#function-handle\"\n  }, \"handle\")), \"(\", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\"\n  }, \"check_kind_t\"), \" , \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle\"\n  }, \"handle\"), \" && other, \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/namespaces/namespacetiro#enum-value_kind\"\n  }, \"value_kind\"), \" expected)\")))), mdx(\"h2\", {\n    \"id\": \"protected-attributes\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#protected-attributes\"\n  }, \"#\"), \"Protected Attributes\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"constexpr \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\"\n  }, \"check_kind_t\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/docs/api/classes/classtiro_1_1handle#variable-check_kind\"\n  }, \"check_kind\")))))), mdx(\"h2\", {\n    \"id\": \"detailed-description\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#detailed-description\"\n  }, \"#\"), \"Detailed Description\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class tiro::handle;\\n\")), mdx(\"p\", null, \"A handle represents a reference to an object. \"), mdx(\"p\", null, \"Valid handles point to an object slot which is managed by the tiro runtime. All handles internally refer to the virtual machine they belong to. \"), mdx(\"h2\", {\n    \"id\": \"public-functions-documentation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#public-functions-documentation\"\n  }, \"#\"), \"Public Functions Documentation\"), mdx(\"h3\", {\n    \"id\": \"function-handle\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-handle\"\n  }, \"#\"), \"function ~handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"~handle() =default\\n\")), mdx(\"h3\", {\n    \"id\": \"function-valid\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-valid\"\n  }, \"#\"), \"function valid\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline bool valid() const\\n\")), mdx(\"p\", null, \"Returns true if this handle points to an object (i.e. it was not moved from). \"), mdx(\"h3\", {\n    \"id\": \"function-type_of\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-type_of\"\n  }, \"#\"), \"function type_of\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline type type_of() const\\n\")), mdx(\"p\", null, \"Returns the type of the value currently held by this handle. \"), mdx(\"h3\", {\n    \"id\": \"function-to_string\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-to_string\"\n  }, \"#\"), \"function to_string\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline string to_string() const\\n\")), mdx(\"p\", null, \"Returns a string that represents the current value. \"), mdx(\"h3\", {\n    \"id\": \"function-raw_vm\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-raw_vm\"\n  }, \"#\"), \"function raw_vm\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline tiro_vm_t raw_vm() const\\n\")), mdx(\"p\", null, \"Returns the raw vm instance associated with this handle. \"), mdx(\"h3\", {\n    \"id\": \"function-raw_handle\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-raw_handle\"\n  }, \"#\"), \"function raw_handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline tiro_handle_t raw_handle() const\\n\")), mdx(\"p\", null, \"Returns the raw handle instance (nullptr for invalid handles). \"), mdx(\"h3\", {\n    \"id\": \"function-operator\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-operator\"\n  }, \"#\"), \"function operator=\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline handle & operator=(\\n    const handle & other\\n)\\n\")), mdx(\"p\", null, \"Copy assigns a handle. \"), mdx(\"p\", null, \"This handle will contain the same value as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"other\"), \". If other was invalid, then this handle will also become invalid. \"), mdx(\"h3\", {\n    \"id\": \"function-operator-1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-operator-1\"\n  }, \"#\"), \"function operator=\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"handle & operator=(\\n    handle && other\\n) =default\\n\")), mdx(\"p\", null, \"Move assigns a handle. \"), mdx(\"p\", null, \"The other handle will become invalid: it may not longer be used for any operations other than destruction and assignments. \"), mdx(\"h3\", {\n    \"id\": \"function-kind\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-kind\"\n  }, \"#\"), \"function kind\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline value_kind kind() const\\n\")), mdx(\"p\", null, \"Returns the kind of the value currently held by this handle. \"), mdx(\"h3\", {\n    \"id\": \"function-handle-1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-handle-1\"\n  }, \"#\"), \"function handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline explicit handle(\\n    tiro_vm_t raw_vm\\n)\\n\")), mdx(\"p\", null, \"Constructs a new handle instance. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Precondition\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"raw_vm != nullptr\"), \". \"), mdx(\"p\", null, \"The handle will belong to the given virtual machine and will be initialized with null.\"), mdx(\"h3\", {\n    \"id\": \"function-handle-2\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-handle-2\"\n  }, \"#\"), \"function handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline handle(\\n    const handle & other\\n)\\n\")), mdx(\"p\", null, \"Constructs a new handle and initialize is it with the same value as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"other\"), \". \"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"other\"), \" is invalid, then the new handle will also become invalid. \"), mdx(\"h3\", {\n    \"id\": \"function-handle-3\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-handle-3\"\n  }, \"#\"), \"function handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"handle(\\n    handle && other\\n) =default\\n\")), mdx(\"p\", null, \"Move constructs a handle. \"), mdx(\"p\", null, \"The other handle will become invalid: it may not longer be used for any operations other than destruction and assignments. \"), mdx(\"h3\", {\n    \"id\": \"function-as\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-as\"\n  }, \"#\"), \"function as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"template <typename T >\\ninline T as() const\\n\")), mdx(\"p\", null, \"Converts this value to the target type. \"), mdx(\"h3\", {\n    \"id\": \"function-as-1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-as-1\"\n  }, \"#\"), \"function as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"template <typename T >\\ninline T as()\\n\")), mdx(\"h2\", {\n    \"id\": \"protected-functions-documentation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#protected-functions-documentation\"\n  }, \"#\"), \"Protected Functions Documentation\"), mdx(\"h3\", {\n    \"id\": \"function-handle-4\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#function-handle-4\"\n  }, \"#\"), \"function handle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"inline handle(\\n    check_kind_t ,\\n    handle && other,\\n    value_kind expected\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"protected-attributes-documentation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#protected-attributes-documentation\"\n  }, \"#\"), \"Protected Attributes Documentation\"), mdx(\"h3\", {\n    \"id\": \"variable-check_kind\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#variable-check_kind\"\n  }, \"#\"), \"variable check_kind\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static constexpr check_kind_t check_kind {};\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Updated on 11 April 2021 at 12:05:09 CEST\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 id=\"tirohandle\"><a class=\"anchor-link\" href=\"#tirohandle\">#</a>tiro::handle</h1><p>A handle represents a reference to an object.  <a href=\"#detailed-description\">More...</a></p><p><code>#include &quot;tiropp/objects.hpp&quot;</code></p><p>Inherited by <a href=\"/tiro-website/docs/api/classes/classtiro_1_1array\">array</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1boolean\">boolean</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1coroutine\">coroutine</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1float__\">float_</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1function\">function</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1integer\">integer</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1module\">module</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1native\">native</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1null\">null</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1record\">record</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1result\">result</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1string\">string</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1tuple\">tuple</a>, <a href=\"/tiro-website/docs/api/classes/classtiro_1_1type\">type</a></p><h2 id=\"protected-classes\"><a class=\"anchor-link\" href=\"#protected-classes\">#</a>Protected Classes</h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>struct</td><td><strong><a href=\"/tiro-website/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\">check_kind_t</a></strong></td></tr></tbody></table><h2 id=\"public-functions\"><a class=\"anchor-link\" href=\"#public-functions\">#</a>Public Functions</h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-~handle\">~handle</a></strong>() =default</td></tr><tr><td>bool</td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-valid\">valid</a></strong>() const<br/>Returns true if this handle points to an object (i.e. it was not moved from).</td></tr><tr><td><a href=\"/tiro-website/docs/api/classes/classtiro_1_1type\">type</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-type_of\">type_of</a></strong>() const<br/>Returns the type of the value currently held by this handle.</td></tr><tr><td><a href=\"/tiro-website/docs/api/classes/classtiro_1_1string\">string</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-to_string\">to_string</a></strong>() const<br/>Returns a string that represents the current value.</td></tr><tr><td><a href=\"/tiro-website/docs/api/files/def_8h#typedef-tiro_vm_t\">tiro_vm_t</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-raw_vm\">raw_vm</a></strong>() const<br/>Returns the raw vm instance associated with this handle.</td></tr><tr><td><a href=\"/tiro-website/docs/api/files/def_8h#typedef-tiro_handle_t\">tiro_handle_t</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-raw_handle\">raw_handle</a></strong>() const<br/>Returns the raw handle instance (nullptr for invalid handles).</td></tr><tr><td><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp;</td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-operator=\">operator=</a></strong>(const <a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp; other)<br/>Copy assigns a handle.</td></tr><tr><td><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp;</td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-operator=\">operator=</a></strong>(<a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp;&amp; other) =default<br/>Move assigns a handle.</td></tr><tr><td><a href=\"/tiro-website/docs/api/namespaces/namespacetiro#enum-value_kind\">value_kind</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-kind\">kind</a></strong>() const<br/>Returns the kind of the value currently held by this handle.</td></tr><tr><td></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-handle\">handle</a></strong>(<a href=\"/tiro-website/docs/api/files/def_8h#typedef-tiro_vm_t\">tiro_vm_t</a> raw_vm)<br/>Constructs a new handle instance.</td></tr><tr><td></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-handle\">handle</a></strong>(const <a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp; other)<br/>Constructs a new handle and initialize is it with the same value as <code>other</code>.</td></tr><tr><td></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-handle\">handle</a></strong>(<a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp;&amp; other) =default<br/>Move constructs a handle.</td></tr><tr><td>template &lt;typename T <!-- -->&gt;<!-- --> <br/>T</td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-as\">as</a></strong>() const<br/>Converts this value to the target type.</td></tr><tr><td>template &lt;typename T <!-- -->&gt;<!-- --> <br/>T</td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-as\">as</a></strong>()</td></tr></tbody></table><h2 id=\"protected-functions\"><a class=\"anchor-link\" href=\"#protected-functions\">#</a>Protected Functions</h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#function-handle\">handle</a></strong>(<a href=\"/tiro-website/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\">check_kind_t</a> , <a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle\">handle</a> &amp;&amp; other, <a href=\"/tiro-website/docs/api/namespaces/namespacetiro#enum-value_kind\">value_kind</a> expected)</td></tr></tbody></table><h2 id=\"protected-attributes\"><a class=\"anchor-link\" href=\"#protected-attributes\">#</a>Protected Attributes</h2><table><thead><tr><th></th><th>Name</th></tr></thead><tbody><tr><td>constexpr <a href=\"/tiro-website/docs/api/classes/structtiro_1_1handle_1_1check__kind__t\">check_kind_t</a></td><td><strong><a href=\"/tiro-website/docs/api/classes/classtiro_1_1handle#variable-check_kind\">check_kind</a></strong></td></tr></tbody></table><h2 id=\"detailed-description\"><a class=\"anchor-link\" href=\"#detailed-description\">#</a>Detailed Description</h2><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">class</span><span class=\"token plain\"> </span><span class=\"token class-name\" style=\"color:rgb(227, 98, 9)\">tiro</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">:</span><span class=\"token base-clause operator\" style=\"color:rgb(0, 92, 197)\">:</span><span class=\"token base-clause class-name\" style=\"color:rgb(227, 98, 9)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">;</span></div></pre></div><p>A handle represents a reference to an object. </p><p>Valid handles point to an object slot which is managed by the tiro runtime. All handles internally refer to the virtual machine they belong to. </p><h2 id=\"public-functions-documentation\"><a class=\"anchor-link\" href=\"#public-functions-documentation\">#</a>Public Functions Documentation</h2><h3 id=\"function-handle\"><a class=\"anchor-link\" href=\"#function-handle\">#</a>function ~handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">~</span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">=</span><span class=\"token keyword\" style=\"color:#e3116c\">default</span></div></pre></div><h3 id=\"function-valid\"><a class=\"anchor-link\" href=\"#function-valid\">#</a>function valid</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">bool</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">valid</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns true if this handle points to an object (i.e. it was not moved from). </p><h3 id=\"function-type_of\"><a class=\"anchor-link\" href=\"#function-type_of\">#</a>function type_of</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> type </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">type_of</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns the type of the value currently held by this handle. </p><h3 id=\"function-to_string\"><a class=\"anchor-link\" href=\"#function-to_string\">#</a>function to_string</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> string </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">to_string</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns a string that represents the current value. </p><h3 id=\"function-raw_vm\"><a class=\"anchor-link\" href=\"#function-raw_vm\">#</a>function raw_vm</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> tiro_vm_t </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">raw_vm</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns the raw vm instance associated with this handle. </p><h3 id=\"function-raw_handle\"><a class=\"anchor-link\" href=\"#function-raw_handle\">#</a>function raw_handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> tiro_handle_t </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">raw_handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns the raw handle instance (nullptr for invalid handles). </p><h3 id=\"function-operator\"><a class=\"anchor-link\" href=\"#function-operator\">#</a>function operator=</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">operator</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">=</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span><span class=\"token plain\"> handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;</span><span class=\"token plain\"> other</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span></div></pre></div><p>Copy assigns a handle. </p><p>This handle will contain the same value as <code>other</code>. If other was invalid, then this handle will also become invalid. </p><h3 id=\"function-operator-1\"><a class=\"anchor-link\" href=\"#function-operator-1\">#</a>function operator=</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">operator</span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">=</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;&amp;</span><span class=\"token plain\"> other</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">=</span><span class=\"token keyword\" style=\"color:#e3116c\">default</span></div></pre></div><p>Move assigns a handle. </p><p>The other handle will become invalid: it may not longer be used for any operations other than destruction and assignments. </p><h3 id=\"function-kind\"><a class=\"anchor-link\" href=\"#function-kind\">#</a>function kind</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> value_kind </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">kind</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Returns the kind of the value currently held by this handle. </p><h3 id=\"function-handle-1\"><a class=\"anchor-link\" href=\"#function-handle-1\">#</a>function handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">explicit</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    tiro_vm_t raw_vm</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span></div></pre></div><p>Constructs a new handle instance. </p><p><strong>Precondition</strong>: <code>raw_vm != nullptr</code>. </p><p>The handle will belong to the given virtual machine and will be initialized with null.</p><h3 id=\"function-handle-2\"><a class=\"anchor-link\" href=\"#function-handle-2\">#</a>function handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span><span class=\"token plain\"> handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;</span><span class=\"token plain\"> other</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span></div></pre></div><p>Constructs a new handle and initialize is it with the same value as <code>other</code>. </p><p>If <code>other</code> is invalid, then the new handle will also become invalid. </p><h3 id=\"function-handle-3\"><a class=\"anchor-link\" href=\"#function-handle-3\">#</a>function handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;&amp;</span><span class=\"token plain\"> other</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">=</span><span class=\"token keyword\" style=\"color:#e3116c\">default</span></div></pre></div><p>Move constructs a handle. </p><p>The other handle will become invalid: it may not longer be used for any operations other than destruction and assignments. </p><h3 id=\"function-as\"><a class=\"anchor-link\" href=\"#function-as\">#</a>function as</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">template</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&lt;</span><span class=\"token keyword\" style=\"color:#e3116c\">typename</span><span class=\"token plain\"> </span><span class=\"token class-name\" style=\"color:rgb(227, 98, 9)\">T</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> T </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">as</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">const</span></div></pre></div><p>Converts this value to the target type. </p><h3 id=\"function-as-1\"><a class=\"anchor-link\" href=\"#function-as-1\">#</a>function as</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">template</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&lt;</span><span class=\"token keyword\" style=\"color:#e3116c\">typename</span><span class=\"token plain\"> </span><span class=\"token class-name\" style=\"color:rgb(227, 98, 9)\">T</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> T </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">as</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span></div></pre></div><h2 id=\"protected-functions-documentation\"><a class=\"anchor-link\" href=\"#protected-functions-documentation\">#</a>Protected Functions Documentation</h2><h3 id=\"function-handle-4\"><a class=\"anchor-link\" href=\"#function-handle-4\">#</a>function handle</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">inline</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(111, 66, 193)\">handle</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    check_kind_t </span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    handle </span><span class=\"token operator\" style=\"color:rgb(0, 92, 197)\">&amp;&amp;</span><span class=\"token plain\"> other</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">    value_kind expected</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">)</span></div></pre></div><h2 id=\"protected-attributes-documentation\"><a class=\"anchor-link\" href=\"#protected-attributes-documentation\">#</a>Protected Attributes Documentation</h2><h3 id=\"variable-check_kind\"><a class=\"anchor-link\" href=\"#variable-check_kind\">#</a>variable check_kind</h3><div><pre class=\"prism-code language-cpp\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token keyword\" style=\"color:#e3116c\">static</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#e3116c\">constexpr</span><span class=\"token plain\"> check_kind_t check_kind </span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">{</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">}</span><span class=\"token punctuation\" style=\"color:rgb(36, 41, 46)\">;</span></div></pre></div><hr/><p>Updated on 11 April 2021 at 12:05:09 CEST</p>","scope":{}}},"__N_SSG":true}