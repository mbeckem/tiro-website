{"pageProps":{"slug":"stdlib","frontMatter":{"title":"The standard library","slug":"/stdlib"},"mdx":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"the-standard-library\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#the-standard-library\"\n  }, \"#\"), \"The standard library\"), mdx(\"p\", null, \"Basic types and functions provided by the runtime: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import std;\")), mdx(\"h2\", {\n    \"id\": \"contents\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#contents\"\n  }, \"#\"), \"Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#basic-types-and-functions\"\n  }, \"Basic types and functions\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-boolean\"\n  }, \"type Boolean\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-integer\"\n  }, \"type Integer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-float\"\n  }, \"type Float\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-null\"\n  }, \"type Null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-string\"\n  }, \"type String\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-symbol\"\n  }, \"type Symbol\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-function\"\n  }, \"type Function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-module\"\n  }, \"type Module\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-nativeobject\"\n  }, \"type NativeObject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-nativepointer\"\n  }, \"type NativePointer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-type\"\n  }, \"type Type\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-type_of\"\n  }, \"func type_of\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#containers\"\n  }, \"Containers\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-tuple\"\n  }, \"type Tuple\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-record\"\n  }, \"type Record\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-array\"\n  }, \"type Array\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-buffer\"\n  }, \"type Buffer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-map\"\n  }, \"type Map\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-set\"\n  }, \"type Set\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#strings\"\n  }, \"Strings\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-stringslice\"\n  }, \"type StringSlice\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-stringbuilder\"\n  }, \"type StringBuilder\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-new_string_builder\"\n  }, \"func new_string_builder\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#input-and-output\"\n  }, \"Input and Output\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-print\"\n  }, \"func print\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-loop_timestamp\"\n  }, \"func loop_timestamp\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#coroutines\"\n  }, \"Coroutines\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-coroutine\"\n  }, \"type Coroutine\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-coroutinetoken\"\n  }, \"type CoroutineToken\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-launch\"\n  }, \"func launch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-current_coroutine\"\n  }, \"func current_coroutine\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-coroutine_token\"\n  }, \"func coroutine_token\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-yield_coroutine\"\n  }, \"func yield_coroutine\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#error-handling\"\n  }, \"Error handling\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#type-result\"\n  }, \"type Result\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-success\"\n  }, \"func success\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-failure\"\n  }, \"func failure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-panic\"\n  }, \"func panic\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#func-catch_panic\"\n  }, \"func catch_panic\"))))), mdx(\"h2\", {\n    \"id\": \"basic-types-and-functions\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#basic-types-and-functions\"\n  }, \"#\"), \"Basic types and functions\"), mdx(\"h3\", {\n    \"id\": \"type-boolean\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-boolean\"\n  }, \"#\"), \"type Boolean\"), mdx(\"p\", null, \"The type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"h3\", {\n    \"id\": \"type-integer\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-integer\"\n  }, \"#\"), \"type Integer\"), mdx(\"p\", null, \"The type of integer expressions such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x1F\"), \".\"), mdx(\"h3\", {\n    \"id\": \"type-float\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-float\"\n  }, \"#\"), \"type Float\"), mdx(\"p\", null, \"Type type of floating point expressions such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.25\"), \".\"), mdx(\"h3\", {\n    \"id\": \"type-null\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-null\"\n  }, \"#\"), \"type Null\"), mdx(\"p\", null, \"The type of the constant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"h3\", {\n    \"id\": \"type-string\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-string\"\n  }, \"#\"), \"type String\"), mdx(\"p\", null, \"The type of all string expressions.\\nStrings are immutable.\"), mdx(\"p\", null, \"TODO: Unicode strings\\nTODO: Internal representation is guaranteed to be UTF-8\"), mdx(\"h3\", {\n    \"id\": \"type-symbol\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-symbol\"\n  }, \"#\"), \"type Symbol\"), mdx(\"p\", null, \"The type of symbol literals, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#answer\"), \".\"), mdx(\"h3\", {\n    \"id\": \"type-function\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-function\"\n  }, \"#\"), \"type Function\"), mdx(\"p\", null, \"The type of all functions.\"), mdx(\"h3\", {\n    \"id\": \"type-module\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-module\"\n  }, \"#\"), \"type Module\"), mdx(\"p\", null, \"The type of all modules:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import std;\\n// std.type_of(std) == std.Module\\n\")), mdx(\"h3\", {\n    \"id\": \"type-nativeobject\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-nativeobject\"\n  }, \"#\"), \"type NativeObject\"), mdx(\"p\", null, \"The type of native objects that have been exposed to tiro.\\nThe tiro runtime manages the lifetime (and the storage) of these objects, which usually includes invoking a native finalizer when the object is collected.\"), mdx(\"h3\", {\n    \"id\": \"type-nativepointer\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-nativepointer\"\n  }, \"#\"), \"type NativePointer\"), mdx(\"p\", null, \"The type of a native pointer that has been exposed to tiro.\\nThe tiro runtime does \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" manage these objects in any way, which makes them very cheap to use.\"), mdx(\"h3\", {\n    \"id\": \"type-type\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-type\"\n  }, \"#\"), \"type Type\"), mdx(\"p\", null, \"The type of all types. In other words, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"std.type_of(value)\"), \" will always return an instance of this type for any kind of value.\"), mdx(\"h3\", {\n    \"id\": \"func-type_of\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-type_of\"\n  }, \"#\"), \"func type_of\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func type_of(v: value);\\n\")), mdx(\"p\", null, \"Returns the type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v\"), \". For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"assert(std.type_of(true) == std.Boolean);\\n\")), mdx(\"h2\", {\n    \"id\": \"containers\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#containers\"\n  }, \"#\"), \"Containers\"), mdx(\"h3\", {\n    \"id\": \"type-tuple\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-tuple\"\n  }, \"#\"), \"type Tuple\"), mdx(\"h3\", {\n    \"id\": \"type-record\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-record\"\n  }, \"#\"), \"type Record\"), mdx(\"h3\", {\n    \"id\": \"type-array\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-array\"\n  }, \"#\"), \"type Array\"), mdx(\"h3\", {\n    \"id\": \"type-buffer\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-buffer\"\n  }, \"#\"), \"type Buffer\"), mdx(\"h3\", {\n    \"id\": \"type-map\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-map\"\n  }, \"#\"), \"type Map\"), mdx(\"h3\", {\n    \"id\": \"type-set\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-set\"\n  }, \"#\"), \"type Set\"), mdx(\"h2\", {\n    \"id\": \"strings\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#strings\"\n  }, \"#\"), \"Strings\"), mdx(\"h3\", {\n    \"id\": \"type-stringslice\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-stringslice\"\n  }, \"#\"), \"type StringSlice\"), mdx(\"h3\", {\n    \"id\": \"type-stringbuilder\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-stringbuilder\"\n  }, \"#\"), \"type StringBuilder\"), mdx(\"h3\", {\n    \"id\": \"func-new_string_builder\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-new_string_builder\"\n  }, \"#\"), \"func new_string_builder\"), mdx(\"h2\", {\n    \"id\": \"input-and-output\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#input-and-output\"\n  }, \"#\"), \"Input and Output\"), mdx(\"h3\", {\n    \"id\": \"func-print\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-print\"\n  }, \"#\"), \"func print\"), mdx(\"h3\", {\n    \"id\": \"func-loop_timestamp\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-loop_timestamp\"\n  }, \"#\"), \"func loop_timestamp\"), mdx(\"h2\", {\n    \"id\": \"coroutines\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#coroutines\"\n  }, \"#\"), \"Coroutines\"), mdx(\"h3\", {\n    \"id\": \"type-coroutine\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-coroutine\"\n  }, \"#\"), \"type Coroutine\"), mdx(\"h3\", {\n    \"id\": \"type-coroutinetoken\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-coroutinetoken\"\n  }, \"#\"), \"type CoroutineToken\"), mdx(\"h3\", {\n    \"id\": \"func-launch\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-launch\"\n  }, \"#\"), \"func launch\"), mdx(\"h3\", {\n    \"id\": \"func-current_coroutine\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-current_coroutine\"\n  }, \"#\"), \"func current_coroutine\"), mdx(\"h3\", {\n    \"id\": \"func-coroutine_token\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-coroutine_token\"\n  }, \"#\"), \"func coroutine_token\"), mdx(\"h3\", {\n    \"id\": \"func-yield_coroutine\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-yield_coroutine\"\n  }, \"#\"), \"func yield_coroutine\"), mdx(\"h2\", {\n    \"id\": \"error-handling\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#error-handling\"\n  }, \"#\"), \"Error handling\"), mdx(\"h3\", {\n    \"id\": \"type-result\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#type-result\"\n  }, \"#\"), \"type Result\"), mdx(\"h3\", {\n    \"id\": \"func-success\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-success\"\n  }, \"#\"), \"func success\"), mdx(\"h3\", {\n    \"id\": \"func-failure\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-failure\"\n  }, \"#\"), \"func failure\"), mdx(\"h3\", {\n    \"id\": \"func-panic\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-panic\"\n  }, \"#\"), \"func panic\"), mdx(\"h3\", {\n    \"id\": \"func-catch_panic\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"className\": \"anchor-link\",\n    \"href\": \"#func-catch_panic\"\n  }, \"#\"), \"func catch_panic\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 id=\"the-standard-library\"><a class=\"anchor-link\" href=\"#the-standard-library\">#</a>The standard library</h1><p>Basic types and functions provided by the runtime: <code>import std;</code></p><h2 id=\"contents\"><a class=\"anchor-link\" href=\"#contents\">#</a>Contents</h2><ul><li><p><a href=\"#basic-types-and-functions\">Basic types and functions</a></p><ul><li><a href=\"#type-boolean\">type Boolean</a></li><li><a href=\"#type-integer\">type Integer</a></li><li><a href=\"#type-float\">type Float</a></li><li><a href=\"#type-null\">type Null</a></li><li><a href=\"#type-string\">type String</a></li><li><a href=\"#type-symbol\">type Symbol</a></li><li><a href=\"#type-function\">type Function</a></li><li><a href=\"#type-module\">type Module</a></li><li><a href=\"#type-nativeobject\">type NativeObject</a></li><li><a href=\"#type-nativepointer\">type NativePointer</a></li><li><a href=\"#type-type\">type Type</a></li><li><a href=\"#func-type_of\">func type_of</a></li></ul></li><li><p><a href=\"#containers\">Containers</a></p><ul><li><a href=\"#type-tuple\">type Tuple</a></li><li><a href=\"#type-record\">type Record</a></li><li><a href=\"#type-array\">type Array</a></li><li><a href=\"#type-buffer\">type Buffer</a></li><li><a href=\"#type-map\">type Map</a></li><li><a href=\"#type-set\">type Set</a></li></ul></li><li><p><a href=\"#strings\">Strings</a></p><ul><li><a href=\"#type-stringslice\">type StringSlice</a></li><li><a href=\"#type-stringbuilder\">type StringBuilder</a></li><li><a href=\"#func-new_string_builder\">func new_string_builder</a></li></ul></li><li><p><a href=\"#input-and-output\">Input and Output</a></p><ul><li><a href=\"#func-print\">func print</a></li><li><a href=\"#func-loop_timestamp\">func loop_timestamp</a></li></ul></li><li><p><a href=\"#coroutines\">Coroutines</a></p><ul><li><a href=\"#type-coroutine\">type Coroutine</a></li><li><a href=\"#type-coroutinetoken\">type CoroutineToken</a></li><li><a href=\"#func-launch\">func launch</a></li><li><a href=\"#func-current_coroutine\">func current_coroutine</a></li><li><a href=\"#func-coroutine_token\">func coroutine_token</a></li><li><a href=\"#func-yield_coroutine\">func yield_coroutine</a></li></ul></li><li><p><a href=\"#error-handling\">Error handling</a></p><ul><li><a href=\"#type-result\">type Result</a></li><li><a href=\"#func-success\">func success</a></li><li><a href=\"#func-failure\">func failure</a></li><li><a href=\"#func-panic\">func panic</a></li><li><a href=\"#func-catch_panic\">func catch_panic</a></li></ul></li></ul><h2 id=\"basic-types-and-functions\"><a class=\"anchor-link\" href=\"#basic-types-and-functions\">#</a>Basic types and functions</h2><h3 id=\"type-boolean\"><a class=\"anchor-link\" href=\"#type-boolean\">#</a>type Boolean</h3><p>The type of <code>true</code> and <code>false</code>.</p><h3 id=\"type-integer\"><a class=\"anchor-link\" href=\"#type-integer\">#</a>type Integer</h3><p>The type of integer expressions such as <code>7</code> or <code>0x1F</code>.</p><h3 id=\"type-float\"><a class=\"anchor-link\" href=\"#type-float\">#</a>type Float</h3><p>Type type of floating point expressions such as <code>1.25</code>.</p><h3 id=\"type-null\"><a class=\"anchor-link\" href=\"#type-null\">#</a>type Null</h3><p>The type of the constant <code>null</code>.</p><h3 id=\"type-string\"><a class=\"anchor-link\" href=\"#type-string\">#</a>type String</h3><p>The type of all string expressions.\nStrings are immutable.</p><p>TODO: Unicode strings\nTODO: Internal representation is guaranteed to be UTF-8</p><h3 id=\"type-symbol\"><a class=\"anchor-link\" href=\"#type-symbol\">#</a>type Symbol</h3><p>The type of symbol literals, e.g. <code>#answer</code>.</p><h3 id=\"type-function\"><a class=\"anchor-link\" href=\"#type-function\">#</a>type Function</h3><p>The type of all functions.</p><h3 id=\"type-module\"><a class=\"anchor-link\" href=\"#type-module\">#</a>type Module</h3><p>The type of all modules:</p><div><pre class=\"prism-code language-plain\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">import std;</span></div><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">// std.type_of(std) == std.Module</span></div></pre></div><h3 id=\"type-nativeobject\"><a class=\"anchor-link\" href=\"#type-nativeobject\">#</a>type NativeObject</h3><p>The type of native objects that have been exposed to tiro.\nThe tiro runtime manages the lifetime (and the storage) of these objects, which usually includes invoking a native finalizer when the object is collected.</p><h3 id=\"type-nativepointer\"><a class=\"anchor-link\" href=\"#type-nativepointer\">#</a>type NativePointer</h3><p>The type of a native pointer that has been exposed to tiro.\nThe tiro runtime does <em>not</em> manage these objects in any way, which makes them very cheap to use.</p><h3 id=\"type-type\"><a class=\"anchor-link\" href=\"#type-type\">#</a>type Type</h3><p>The type of all types. In other words, <code>std.type_of(value)</code> will always return an instance of this type for any kind of value.</p><h3 id=\"func-type_of\"><a class=\"anchor-link\" href=\"#func-type_of\">#</a>func type_of</h3><div><pre class=\"prism-code language-plain\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">func type_of(v: value);</span></div></pre></div><p>Returns the type of <code>v</code>. For example:</p><div><pre class=\"prism-code language-plain\" style=\"color:rgb(36, 41, 46);background-color:#f6f8fa;padding:10px\"><div class=\"token-line\" style=\"color:rgb(36, 41, 46)\"><span class=\"token plain\">assert(std.type_of(true) == std.Boolean);</span></div></pre></div><h2 id=\"containers\"><a class=\"anchor-link\" href=\"#containers\">#</a>Containers</h2><h3 id=\"type-tuple\"><a class=\"anchor-link\" href=\"#type-tuple\">#</a>type Tuple</h3><h3 id=\"type-record\"><a class=\"anchor-link\" href=\"#type-record\">#</a>type Record</h3><h3 id=\"type-array\"><a class=\"anchor-link\" href=\"#type-array\">#</a>type Array</h3><h3 id=\"type-buffer\"><a class=\"anchor-link\" href=\"#type-buffer\">#</a>type Buffer</h3><h3 id=\"type-map\"><a class=\"anchor-link\" href=\"#type-map\">#</a>type Map</h3><h3 id=\"type-set\"><a class=\"anchor-link\" href=\"#type-set\">#</a>type Set</h3><h2 id=\"strings\"><a class=\"anchor-link\" href=\"#strings\">#</a>Strings</h2><h3 id=\"type-stringslice\"><a class=\"anchor-link\" href=\"#type-stringslice\">#</a>type StringSlice</h3><h3 id=\"type-stringbuilder\"><a class=\"anchor-link\" href=\"#type-stringbuilder\">#</a>type StringBuilder</h3><h3 id=\"func-new_string_builder\"><a class=\"anchor-link\" href=\"#func-new_string_builder\">#</a>func new_string_builder</h3><h2 id=\"input-and-output\"><a class=\"anchor-link\" href=\"#input-and-output\">#</a>Input and Output</h2><h3 id=\"func-print\"><a class=\"anchor-link\" href=\"#func-print\">#</a>func print</h3><h3 id=\"func-loop_timestamp\"><a class=\"anchor-link\" href=\"#func-loop_timestamp\">#</a>func loop_timestamp</h3><h2 id=\"coroutines\"><a class=\"anchor-link\" href=\"#coroutines\">#</a>Coroutines</h2><h3 id=\"type-coroutine\"><a class=\"anchor-link\" href=\"#type-coroutine\">#</a>type Coroutine</h3><h3 id=\"type-coroutinetoken\"><a class=\"anchor-link\" href=\"#type-coroutinetoken\">#</a>type CoroutineToken</h3><h3 id=\"func-launch\"><a class=\"anchor-link\" href=\"#func-launch\">#</a>func launch</h3><h3 id=\"func-current_coroutine\"><a class=\"anchor-link\" href=\"#func-current_coroutine\">#</a>func current_coroutine</h3><h3 id=\"func-coroutine_token\"><a class=\"anchor-link\" href=\"#func-coroutine_token\">#</a>func coroutine_token</h3><h3 id=\"func-yield_coroutine\"><a class=\"anchor-link\" href=\"#func-yield_coroutine\">#</a>func yield_coroutine</h3><h2 id=\"error-handling\"><a class=\"anchor-link\" href=\"#error-handling\">#</a>Error handling</h2><h3 id=\"type-result\"><a class=\"anchor-link\" href=\"#type-result\">#</a>type Result</h3><h3 id=\"func-success\"><a class=\"anchor-link\" href=\"#func-success\">#</a>func success</h3><h3 id=\"func-failure\"><a class=\"anchor-link\" href=\"#func-failure\">#</a>func failure</h3><h3 id=\"func-panic\"><a class=\"anchor-link\" href=\"#func-panic\">#</a>func panic</h3><h3 id=\"func-catch_panic\"><a class=\"anchor-link\" href=\"#func-catch_panic\">#</a>func catch_panic</h3>","scope":{}}},"__N_SSG":true}